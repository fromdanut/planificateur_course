<?php

namespace PC\PlatformBundle\Repository;
use PC\PlatformBundle\Entity\RecipeListOption;
use PC\PlatformBundle\Entity\ShoppingListOption;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends \Doctrine\ORM\EntityRepository
{
    /*
        To load the image of recipe.
    */
    public function withImage(QueryBuilder $qb)
    {
      $qb
        ->leftJoin('r.image', 'image')
        ->addSelect('image')
      ;
    }

    public function withCategories(QueryBuilder $qb)
    {
      $qb
        ->leftJoin('r.categories', 'categories')
        ->addSelect('categories')
      ;
    }

    public function withIngredients(QueryBuilder $qb)
    {
      $qb
        ->leftJoin('r.recipeIngredients', 'recipeIng')
            ->addSelect('recipeIng')
        ->leftJoin('recipeIng.ingredient', 'ing')
            ->addSelect('ing')
        ->leftJoin('ing.unit', 'unit')
            ->addSelect('unit')
      ;
    }

    /*

        Apply a set of where clause from $option.
    */
    public function byOption(QueryBuilder $qb, $option)
    {
        if ($option->getQuick()) {
            $qb->where('r.cookingTime < 20');
        }

        if ($option->getEco()) {
            $qb->andWhere('r.price < 10');
        }

        if ($option->getDiet()) {
            $qb->andWhere('r.calorie < 15000');
        }

        $qb->andWhere('r.rating >= :rating')
        ->setParameter('rating', $option->getRating());

        if ($option instanceof ShoppingListOption) {
            // limit is nb of meal the user wants.
            $qb->setMaxResults($option->getNbMeal());
        }

        elseif ($option instanceof RecipeListOption) {
            // key-word filter.
            if ($option->getKeyword() ==! null) {
                $qb->andWhere('r.name LIKE :exp')
                ->setParameter('exp', '%'.$option->getKeyword().'%');
            }
        }
    }

    /*
        Enables pagination.
    */
    public function findByOptionPaginated($option, $page, $nbPerPage)
    {
        $qb = $this->createQueryBuilder('r');
        $this->byOption($qb, $option);
        $this->withImage($qb);
        $this->withCategories($qb);
        $query = $qb->getQuery();

        $query
          // Set first recipe.
          ->setFirstResult(($page-1) * $nbPerPage)
          // Set number of recipe.
          ->setMaxResults($nbPerPage)
          ;

        return new Paginator($query, true);
    }

    public function findByOption($option)
    {
        $qb = $this->createQueryBuilder('r');
        $this->withImage($qb);
        $this->byOption($qb, $option);

        return $qb
          ->getQuery()
          ->getResult()
        ;
    }

    /*
        int id
        int nb
        return list of recipe Entity
    */
    public function findWithImageAndCat($nb)
    {
        $qb = $this->createQueryBuilder('r');
        $this->withImage($qb);
        $this->withCategories($qb);
        $qb->setMaxResults($nb);

        return $qb
            ->getQuery()
            ->getResult();
    }

    /*
        Return a recipe with the image, categories and ingredients.
        Used in RecipeController:viewAction.
    */
    public function findOneWithImageCatAndIngredients($id)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->where('r.id = :id')
                ->setParameter('id', $id);
        $this->withImage($qb);
        $this->withCategories($qb);
        $this->withIngredients($qb);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findLast()
    {
        $qb = $this->createQueryBuilder('r');
        $qb
            ->orderBy('r.datePublication', 'DESC')
            ->setMaxResults(1);

        return $qb
            ->getQuery()
            ->getOneOrNullResult();
    }
}
