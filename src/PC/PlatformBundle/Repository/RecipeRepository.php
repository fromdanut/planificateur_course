<?php

namespace PC\PlatformBundle\Repository;
use PC\PlatformBundle\Entity\RecipeListOption;
use PC\PlatformBundle\Entity\ShoppingListOption;
use Doctrine\ORM\QueryBuilder;

/**
 * RecipeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RecipeRepository extends \Doctrine\ORM\EntityRepository
{
    /*
        Permet de charger l'image des recette.
    */
    public function withImage(QueryBuilder $qb)
    {
      $qb
        ->leftJoin('r.image', 'image')
        ->addSelect('image')
      ;
    }

    public function findByOption($option)
    {
        $qb = $this->createQueryBuilder('r');

        /*
        ajoute les condition communes : correspondant aux attributs de l'entity RecipeOption.
        Puis, en fonction du type d'instance du parametre $option rajoute
        les conditions correspondant aux attributs de l'instance.
        */
        if ($option->getQuick()) {
            $qb->where('r.cookingTime < 20');
        }

        if ($option->getEco()) {
            $qb->andWhere('r.price < 10');
        }

        if ($option->getDiet()) {
            $qb->andWhere('r.calorie < 15000');
        }

        $qb->andWhere('r.rating >= :rating')
        ->setParameter('rating', $option->getRating());

        if ($option instanceof ShoppingListOption) {
            // Limité au nombre de repas voulu par l'utilisateur.
            $qb->setMaxResults($option->getNbMeal());
        }

        elseif ($option instanceof RecipeListOption) {
            // Filtre par catégorie. A faire...
            // Filtre par mot clé.
            if ($option->getKeyword() ==! null) {
                $qb->andWhere('r.name LIKE :exp')
                ->setParameter('exp', '%'.$option->getKeyword().'%');
            }
            // Limité au nombre de repas voulu par l'utilisateur.
            $qb->setMaxResults(12);
        }

        // jointure avec les images des recettes.
        $this->withImage($qb);

        return $qb
          ->getQuery()
          ->getResult()
        ;
    }
}
